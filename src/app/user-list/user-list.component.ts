import { Component, OnInit } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { user } from '../models/user.model';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ServicesService } from '../services/services.service';
import { UserFormComponent } from './user-form/user-form.component';
import { DomSanitizer, SafeResourceUrl, SafeUrl} from '@angular/platform-browser';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent implements OnInit {

  dataSources!: MatTableDataSource<user>;
  displayedColumns: string[] = ['name', 'age', 'Actions'];
  image!: any; //= "data:image/png;base64," + "";

  constructor(public dialog: MatDialog, private _snackBar: MatSnackBar, private services: ServicesService, private sanitizer: DomSanitizer) { }

  ngOnInit(): void {
    this.getUsers();
  }

  async getUsers() {
    await this.services.getAllUsers().subscribe((res: user[] | undefined) => {
      this.dataSources = new MatTableDataSource(res);
    })
  }

  addUser() {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.disableClose = true;
    dialogConfig.autoFocus = true;
    dialogConfig.width = '450px';

    let dialogRef = this.dialog.open(UserFormComponent, dialogConfig);

    dialogRef.afterClosed().subscribe(res => {
      if (res != 0) {
        this._snackBar.open("User was created successfully", "Close", {
          duration: 2000,
        });
        this.getUsers();
      }
    })
  }

  editUser(user: user) {
    const dialogConfig = new MatDialogConfig();
    dialogConfig.disableClose = true;
    dialogConfig.autoFocus = true;
    dialogConfig.width = '450px';
    dialogConfig.data = {user: user};

    let dialogRef = this.dialog.open(UserFormComponent, dialogConfig);

    dialogRef.afterClosed().subscribe(res => {
      if (res != 0) {
        this._snackBar.open("User was edited successfully", "Close", {
          duration: 2000,
        });
        this.getUsers();
      }
    })
  }

  async deleteUser(user: user) {
    await this.services.deleteUser(user).subscribe((res: any) => {
      this._snackBar.open("User was deleted successfully", "Close", {
        duration: 2000,
      });
    })
  }

  async downloadImage() {
    await this.services.getImage().subscribe((res: string | undefined) => {
      this.image = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${res}`);
    })
  }

}
